todo
    - implement socket close
    DONE
    - handle/ignore network errors on send/recv
    DONE
    - resend ICANHAZ if no reply received, in heartbeat
    DONE
    - resend ICANHAZ-OK if duplicate request received
    DONE
    - socket type validation at OHAI time
    LATER
    - merge ICANHAZ into NOM, simplify wire protocol
    DONE
    - implement ROUTER socket using schemed identities
    DONE
    - ROUTER log unroutable messages
    DONE
    - check PUB socket drops output if no active peerings
    DONE
    - check ROUTER drops output if no active peerings
    DONE
    - send HUGZ from SUB back to PUB
    DONE
    - check PUSH/PULL socket pattern
    DONE
    - implement SINGLE routing
    DONE
    - return ROTFL when OHAI is rejected (too many peers)
    DONE
    - handle multipart requests and replies
    DONE
    - basic TCP/ZMTP connect/bind framework
    DONE
    - async TCP/ZMTP message send and recv (unoptimized)
    DONE
    - ring buffer to encode/decode messages (vtx_codec)
    DONE
    - use ring buffer in TCP driver

        - handle REP socket side
            - per vocket, list of request peerings
            - when peering gets request, add to list
            - dispatch peering requests to REP socket one by one
            - on input, and on reply sent back (ready again)
        -



    - pluggable codec algorithms
    - use ring buffer in UDP driver





Test cases

request-reply
    with multiple requesters sending at same time
    reply must get requests and route replies correctly
exception
    get queue overflow, check response of driver
    may require forced blockages
pub-sub
    with multiple subscribers
    verify all subscribers get all messages


    - implement named subports in NOM-1
    - enable/disable unreliability in driver
    - driver custom configuration? external config file?
        - pseudofailures
        - scheme name to use
        - limits on sockets and peerings
        - logging mode
    - make vtx logging console
    - make vtx driver API
    - make autotooling and move stuff to proper directories
    - copy czmq doc page generation


++ Protocol sketch

[[code]]
NOM-1           = open-peering *use-peering

open-peering    = C:OHAI ( S:OHAI-OK / S:ROTFL )

use-peering     = C:OHAI ( S:OHAI-OK / S:ROTFL )
                / C:HUGZ S:HUGZ-OK
                / S:HUGZ C:HUGZ-OK
                / C:NOM
                / S:NOM

ROTFL           = version reserved %b0000 %b0000 reason-text
version         = %b0001
reserved        = %b0000
reason-text     = *VCHAR

OHAI            = version reserved %b0001 %b0000 address
address         = scheme "://" ( broadcast / hostname / hostnumber ) ":" port
scheme          = "udp"
broadcast       = "*"
hostname        = label *( "." label )
label           = 1*( %x61-7A / DIGIT / "-" )
hostnumber      = 1*DIGIT "." 1*DIGIT "." 1*DIGIT "." 1*DIGIT
port            = 1*DIGIT

OHAI-OK         = version reserved %b0010 %b0000 address

HUGZ            = version reserved %b0011 %b0000
HUGZ-OK         = version reserved %b0100 %b0000

NOM             = version reserved %b0111 sequence zmq-payload
sequence        = 4BIT          ; Request sequencing
zmq-payload     = 1*zmq-frame
zmq-frame       = tiny-frame / short-frame / long-frame
tiny-frame      = 1OCTET frame-body
short-frame     = %xFE 2OCTET frame-body
long-frame      = %xFF 4OCTET frame-body
frame-body      = *OCTET
[[/code]]

and now the notes:

* A client opens a //peering// to a server. A server binds to and receives from some port. "Client" and "server" means exactly which node opens the peering, and which node accepts the peering. Nothing more. A peering has some state. We'll come to that.

* A client may start a peering-open dialog before the server is ready. In this case the client will send OHAIs repeatedly, at short intervals, until a server responds with OHAI-OK.

* OHAI specifies an address, which the OHAI-OK command echoes. This lets a client broadcast OHAI to any listening server, and connect to the one that responds. We call this a //broadcast peering//.

* Once a peering is established, either peer can send unsolicited HUGZ or NOMs. A client can also send OHAI more than once to the same server, which may be needed since UDP can lose messages, e.g. the returning OHAI-OK.

* NOM-1 allows synchronous request-reply to be built using NOMs, when the sending and receiving sockets implement the 0MQ request-reply patterns. NOM-1 does not use address envelopes, it is designed for single-hop request-reply.

* Request-reply is built on top of NOMs. Since UDP will randomly drop messages, we implement a minimal resend capability. Each request NOM has an incrementing sequence number. The sender resends the NOM at short intervals at least as long as the peering is alive, until it receives a matching reply NOM. The recipient will resend its last reply NOM if it receives a duplicate request NOM.

* Heartbeating consists of a ping-pong HUGZ/HUGZ-OK dialog. One peer sends HUGZ to the other, which replies with HUGZ-OK. Neither command has any payload. HUGZ and HUGZ-OK are not correlated. A peer should send HUGZ at regular intervals.

* Silence means a peer has died. A server should handle this by destroying all resources associated with that peering. A client should handle this by restarting the peering-open dialog.

++ Protocol abstract

NOM-1 is a minimal framing and control protocol over UDP. Main aspects:

* Enables virtual peerings (peerings) between peers.
* Minimal reliability for synchronous request-reply.
* Automatic heartbeating and peering garbage collection.
* Supports UDP broadcast ('any') peerings.
* Assumes unreliable, unordered datagram transport.
* Assumes maximum message size within normal MTU (512 bytes).
* Allows multipart messages within this limit.
* No explicit identities.

++ Named Subports

...?

++ Protocol and commands

Frames have length defined by transport.
Frames that are not valid are discarded.
First frame in any dialog must be OHAI.
OHAI is always sent from active to passive.
I.e. connecting socket to binding socket.
Reply to OHAI is OHAI-OK or ERROR.
Any peer can send HUGZ, reply is HUGZ-OK or ERROR.
Any peer can send NOM, no reply.

++ Binding and connecting

Any peer can do multiple binds, multiple connects
Each bind creates public FD
    all public FDs are polled for input
    when new peer appears, creates a peering
All peerings share same private FD for output
    use unconnected socket and sendto
    each peering has a remote address for sendto
Input can arrive on private or public socket
    each frame needs to identify the peering #
    defined by peer that sends OHAI
    reused in all other peers for this peering

Connect can go to *, meaning 'anyone'
    if * used, server reply provides address
    if address used, recvfrom must be same addr
Binding is synchronous
    completes immediately, or fails with error code
Connection is asynchronous
    peering is ready after unspecified delay

++ Connection handshake

Client sends OHAI to server, either directly or via broadcast
Client includes server target address
Server receives message, replies with OHAI-OK
Server includes body of OHAI command
    - any unique string would work
    - allows clients to distinguish returning OHAI-OK commands

++ Error responses

ROTLF + error text
    closes peering if any
    -> bad socket pairing
    -> too many peers already connected
    -> shutting down
    -> request NOM to unknown request
    -> other faults?

++ Heartbeating

We use Belts and Braces heartbeating with optimizations, from the Guide (unpublished section).

++ Incoming fair-queuing

TBD
With multiple peerings, read from peerings in round-robin fashion?
- this should be built into zloop reactor, not done in driver
- can we make a test case that demonstrates the problem?

++ Error reporting and logging

Sent to inproc://vtx/logger PUB socket.
Format is
    S: udp: some message here
    where S = I, W, E

VTX provides logger that will collect and print all output.

++ Request-reply Emulation

Several issues here. One is UDP message loss, which we have to handle here otherwise REQ sockets will break too often. Two is complexity of multihop request-reply (address envelope). Three is state machine in REQ and REP socket emulation.

Normal 0MQ REQ/REP one-hop requires: REQ adds null part to request, DEALER distributes request, ROUTER generates identity and prepends to request, REP removes and stores envelope, REP rewraps reply, ROUTER pops identity and uses to route reply, DEALER forwards reply, REQ removes null part.

If we restrict our REQ/REP to one hop, we can simplify: REQ distributes request, REP stores peering ID, and uses to route reply. Much simpler.

For reliability, REQ can resend request as long as it has not received a reply, and REP can resend reply when it gets a duplicate request. The simplest model is that we hold 'last request' and 'last reply' for each peering. We can then resend requests, and resend replies as needed. If the peering does down, this data can be cleared. So reliability is over UDP, but not over peer failure. (That can be handled at a higher level.)

To distinguish new requests from duplicate resent requests, we use a sequence number that is incremented in each command. Should be held per peering.

For the state machine, we need to emulate in/out blocking. Simplest is to configure vocket with an "synchronize" option, either NULL, REQ, or REP.

++ Security & monitoring aspects

TBD

Set limit on peerings per vocket
Set limit on peerings per driver
Configurable timeout on peerings
Blocklist of bad hosts (invalid data, old versions)
Reporting of protocol errors
Reporting of died peers

++ Publish/subscribe

- for a later version of VTX, it's not critical
- will do at publisher, not subscriber
    - solve once, for all transports
    - extensible matching engines
    - starting with prefix matching
- API cannot be get/setsockopt since we don't have access to this
    - instead, explicit subscribe, unsubscribe
        vtx_subscribe ()
        vtx_unsubscribe ()
    - default is no subscriptions
    - subscriptions are cummulative
- protocol has to do reliable subscribe/unsubscribe:
    VTX_UDP_ICANHAZ
        add / remove
        type name
        blob value / string value?
    VTX_UDP_ICANHAZ_OK
        confirmed

++ VTX design constraints

* Bind/connect to at most one driver/transport, otherwise semantics will be weird. We might allow multiple drivers for dealer and push. For pub, it would not work.

* By default SUB sockets receive all data. Filtering cannot be done via setsockopt (does not operate on PAIR pipes). How to do this? Ideally, upstream filters to publishers...

++ Schemed Identities

This is a draft proposal for //schemed identities// for 0MQ transports. The goal of this proposal is to replace the current opaque generated identities with schemed identities that provide useful information about peers.

+++ Properties of Opaque Identities

Opaque identities -- currently implemented as binary UUIDs -- have these properties:

* They are globally unique and never reused.
* They must be treated as binary data.
* They do not provide any information about the peer.
* They are 17 octets long.

The two main problems are that they are not printable strings (so require extra work to print or log), and that they carry no information about the peer.

+++ Schemed Identity Design

We propose identities that follow the same scheme as transport names. That is:

    schemename :// addressvalue

Where schemename is a 0MQ transport (e.g. "tcp", "pgm", etc.) and addressvalue is the address of the remote peer (or sender) according to the semantics and syntax of the transport.

A typical addressvalue would consist of host IP address, ":", and port number.

For backwards compatibility, if the first octet of the identity is a binary 0, the identity is an opaque binary blob, as currently.

The behaviour of 0MQ in generating either opaque blobs or schemed identities should be consistent (either versioned, or configurable) so that applications can reliably attempt to parse and/or print identities.

+++ Sender Identity

We propose an extension to the 0MQ API, allowing any receiver to know the identity of the immediate sender (or device) of the last message received:

    zmq_getsockopt (socket, ZMQ_PEER, char *peer, size_t peer_size);

++ Regression Testing

- create and bind all socket types in turn
- close all sockets
- create and connect all socket types in turn
- close all sockets
- try two connects for PAIR client socket, should fail
- check two PAIR clients to one PAIR server, should fail
- disable random failures
- one PUB, two SUB, check that messages arrive twice
- enable random failures
- check REQ to REP, 10 times
- check ROUTER socket for reply side
- check DEALER socket for reply side
- check PUSH-PULL distribution

++ Durable Sockets

VTX drivers are single threads. We scale by creating multiple driver instances. Since durable sockets (explicit identities) assume a multi-threaded driver instance, we do not support them.

++ Ring Codec

The ring codec buffers message data for output or input. It serializes and deserializes message data, batches small messages together, and exposes read/write zones for I/O.

The API is:

    vtx_codec
        store   - store zmq_msg_t into codec
        fetch   - fetch zmq_msg_t from codec
        recv    - store network data into codec
        send    - fetch network data from codec

++ Notes for NOM-2

* Storing 'more' byte in frame length count is unpleasant and makes codecs bizarre. Frame should be fixed length header that includes a length counter, followed by that many bytes of body data. Length counter should start at 0, not 1.

* REQ-REP will retry for reliability, but DEALER-REP and ROUTER-REP won't - sender should retry themselves.

++ Optimisation notes

* Send message pointers, not full messages, across pipes.
* For peering codec, we can limit on number of messages, or/and number of bytes held.
* Make ring buffer sizes powers of 2, and use & to mod indices

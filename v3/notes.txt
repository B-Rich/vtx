Patterns for UDP

++ Protocol abstract

ZeroMQ Datagram Transfer Protocol, ZDTP. It's a minimal framing and control
protocol over UDP. Main aspects:

* Enables virtual connections (links) between peers.
* Minimal reliability for synchronous request-reply.
* Automatic heartbeating and link garbage collection.
* Supports UDP broadcast ('any') connections.
* Assumes unreliable, unordered datagram transport.
* Assumes maximum message size within normal MTU (512 bytes).
* Allows multipart messages within this limit.

++ Socket types supported

Use PAIR to PAIR for all pipes, and use emulated socket type to define
pattern semantics.

    USER    RT  MX  ENV FLOW
    ----    --  --  --- ----
    REQ     LB   -   -  SYRQ
    REP     RP   -   -  SYRP
    DEALER  LB   -   -  ASYN
    ROUTER  RP   -   Y  ASYN    DONT IMPLEMENT YET
    PUB     CC   -   -  ASYN
    SUB     NO   -   -  ASYN
    PUSH    LB   -   -  ASYN
    PULL    NO   -   -  ASYN
    PAIR    DI   1   -  ASYN

For ROUTER, we need to create an envelope for the caller to manipulate.

++ Data structures

List of sockets:
    routing mechanism
        int routing
    max links
    flow control
    array of public FDs
        int public []
    single private FD
        int private
    list of links:
        identity, generated
        struct sockaddr_in addr
        time to live
        request sequence
        last reply if any
    //  ZMQ poll set
    zmq_pollitem_t *pollset = NULL;
    Bool rebuild_pollset = TRUE;

++ Protocol and commands

Frame:
    command         4 bits
    sequence        4 bits
    body            MSGMAX - 1 bytes

Commands:
    %x00    CONNECT
    %x01    STATUS
    %x02    PING
    %x03    PONG
    %x04    ASYNC
    %x05    SYNREQ
    %x06    SYNREP

Frames have length defined by transport.
Frames that are not valid are discarded.
First frame in any dialog must be CONNECT.
CONNECT is always sent from active to passive.
I.e. connecting socket to binding socket.
Reply to CONNECT is STATUS.
Any peer can send PING, reply is PONG.
Any peer can send ASYNC, no reply.
Any peer can send SYNREQ, reply is SYNREP.

++ Binding and connecting

Any peer can do multiple binds, multiple connects
Each bind creates public FD to monitor
    all public FDs are polled for input
All links share same private FD
    use unconnected socket and sendto
    each link has a remote address for sendto
Connect can go to *, meaning 'anyone'
    if * used, server reply provides address
    if address used, recvfrom must be same addr
Binding is synchronous
    completes immediately, or fails with error code
Connection is asynchronous
    link is ready after unspecified delay

++ Connection handshake

Local peer sends CONNECT to remote via private FD.
Remote receives CONNECT on public FD.
Remote creates new link with local addr.
Remote responds with STATUS.
Local receives STATUS on private FD.
Local creates new link with remote addr.

++ CONNECT command

Specifies
    protocol ID
    protocol version
    origin socket type (REQ, REP, etc.)
    selector, as binary string

++ Heartbeating

We use heartbeating to garbage collect dead links.
Applies to each link:
    Default TTL is 30 seconds.
    Assumed latency for transport is 5 seconds.
    Any incoming traffic on link is taken as "alive".
    Send PING at (30 - 5) seconds.
    Expire link when it reaches TTL expiry time.
Response to PING is PONG.

++ Routing mechanisms

none
    output is not allowed, message is dropped.
reply-to
    message wrapped in envelope indicating origin link,
    and this is used to re-route output if any.
load-balance
    message is sent to next link, which is cycled to end
    of list of links. May be filtered by the selector.
carbon-copy
    message is sent to all links in turn, filtered by the
    selector.
direct
    message is sent to the single link, asserts no more
    than one.

++ Incoming fair-queuing

With multiple links, read from links in round-robin fashion.

++ Error reporting and logging

Sent to inproc://vtx/logger PUB socket.
Format is
    S: udp: some message here
    where S = I, W, E

VTX provides logger that will collect and print all output.

++ Reliable request-reply

REQ sockets will die/block if message gets lost. So, we implement a
minimal resend/retry mechanism:

    Send as SYNREQ
    High 4 bits of control byte are sequence nbr
    Recipient tracks last received sequence nbr per link
    Outgoing reply is sent as SYNREP
    Set to last received sequence nbr
    Stored/saved per link
    If duplicate request arrives, old reply is resent

++ 0MQ message encoding

For ASYNC, SYNREQ, SYNREP commands, body is encoded 0MQ message:

    [length] [frame data]

Where length is 0-254, or 255 + 2 further bytes in network order. Total
message size must fit into msgmax for transport (512 bytes - headers).

++ Socket detailed analysis

REP = request-reply server:
    [REP]<--->[DEALER]
    routing model: N peers, reply-to addressing
    bind to *:port
    receive message from addr
    if message is HELO, (re)register link
        and send back ack
    else
        lookup link from sender addr
    create envelope with link id
    send to pipe
    in main thread:
        REP socket receives message from pipe
        REP socket removes & saves envelope
        app reads request from REP socket
        app sends reply to REP socket
        REP socket wraps reply in envelope
        REP socket sends message to pipe
    recv from pipe
    remove envelope to give link id
    send reply to link addr
        save last reply per link
        resend if asked to

REQ = request-reply client:
    [REQ]<--->[DEALER]
    routing model: 1 single peer, direct addressing
    connect to address:port
        send HELO handshake
        wait for ack
            repeat until successful
        if address was '*', replying peer is addr
        (how can we provide this back to caller app?)
            vtx_getsockopt (something)
    in main thread:
        app sends request to socket
        socket sends message to pipe
    recv from pipe
    send to link addr
    wait for reply
        repeat until successful
        using message sequence number

DEALER = asynchronous server:
    [DEALER]<--->[DEALER]
    routing model: N peers, reply-to addressing
    same, except caller has DEALER socket
    caller has to manage envelope manually

PUB = publisher:
    [PUB]<--->[SUB]
    routing model: cc to all peers
    bind to *:port
    receive message from addr
    register new links as for REP
    also, prefix filter for each link
    each message sent by app, cc to all links
    doing prefix match on filter first
    using non-connected UDP sockets, sendto each address

SUB = subscriber:
    [SUB]<--->[PUB]
    routing model: none, input only
    connect to address:port or *:port
    handshake as for REQ socket, but also sending filter
    can connect multiple times to different addresses
    using non-connected UDP socket, recv on socket

PUSH = pusher:
    [PUSH]<--->[PULL]
    routing model: lb to all peers
    bind to interface:port

PULL = puller:
    [PULL]<--->[PUSH]
    routing model: none, input only
    connect to * or N addresses
